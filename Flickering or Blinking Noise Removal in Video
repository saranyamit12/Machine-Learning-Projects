
# Flickering or blinking noises in a video are unwanted, rapid changes in brightness or color that disrupt the smooth playback of the video.
#These noises can be distracting and reduce the overall video quality

#blinking pixels removal

def remove_blinking_pixels(frame, kernel_size=3, iterations=1):
    # Convert the frame to grayscale
    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Apply morphological opening and then closing to remove noise
    kernel = np.ones((kernel_size, kernel_size), np.uint8)
    opened = cv2.morphologyEx(gray_frame, cv2.MORPH_OPEN, kernel, iterations=iterations)
    cleaned_frame = cv2.morphologyEx(opened, cv2.MORPH_CLOSE, kernel, iterations=iterations)
    
    # Convert the cleaned frame back to BGR
    cleaned_frame_bgr = cv2.cvtColor(cleaned_frame, cv2.COLOR_GRAY2BGR)
    
    return cleaned_frame_bgr

# Load the video
input_video_path = 'input_video.mp4'
output_video_path = 'output_video.mp4'
cap = cv2.VideoCapture(input_video_path)

# Get video properties
frame_width = int(cap.get(3))
frame_height = int(cap.get(4))
fps = int(cap.get(5))
num_frames = int(cap.get(7))

# Define codec and create VideoWriter object
fourcc = cv2.VideoWriter_fourcc(*'XVID')
out = cv2.VideoWriter(output_video_path, fourcc, fps, (frame_width, frame_height))

# Capture the initial frame without LED display for background subtraction
ret, background_frame = cap.read()

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    
    # Calculate absolute difference between the frame and the background
    diff = cv2.absdiff(frame, background_frame)
    
    # Convert the difference to grayscale and threshold
    gray_diff = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray_diff, 30, 255, cv2.THRESH_BINARY)
    
    # Inpaint the LED display area
    inpainted_frame = cv2.inpaint(frame, thresh, inpaintRadius=3, flags=cv2.INPAINT_TELEA)
    
    # Update the background frame for background subtraction
    background_frame = frame
    
    # Write the processed frame to the output video
    out.write(inpainted_frame)
    
    cv2.imshow('Original Video', frame)
    cv2.imshow('Inpainted Video', inpainted_frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
out.release()
cv2.destroyAllWindows()

